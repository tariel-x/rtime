package rtime_test

import (
	"testing"
	"time"

	"github.com/tariel-x/rtime"
)

var t1 = time.Date(2023, 03, 1, 02, 48, 05, 0, time.UTC)

var layouts1 = map[string]string{
	rtime.GOST2016Word:              "1 –º–∞—Ä—Ç–∞ 2023 –≥.",
	rtime.GOST2016Numeric:           "01.03.2023",
	rtime.GOST2003Word:              "01 –º–∞—Ä—Ç–∞ 2023 –≥.",
	rtime.GOST2003NumericReverse:    "2023.03.01",
	"2 —è–Ω–≤–∞—Ä—è 2006 –≥., –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "1 –º–∞—Ä—Ç–∞ 2023 –≥., —Å—Ä–µ–¥–∞",
	"2 —è–Ω–≤–∞—Ä—è 2006 –≥., –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "1 –º–∞—Ä—Ç–∞ 2023 –≥., –°—Ä–µ–¥–∞",
	"2 —è–Ω–≤–∞—Ä—è 2006 –≥., –ø–Ω":          "1 –º–∞—Ä—Ç–∞ 2023 –≥., —Å—Ä",
	"2 —è–Ω–≤–∞—Ä—è 2006 –≥., –ü–ù":          "1 –º–∞—Ä—Ç–∞ 2023 –≥., –°–†",
	"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 2 —è–Ω–≤ 2006 –≥. –≤ 15 —á–∞—Å–æ–≤ 04 –º–∏–Ω—É—Ç": "–°—Ä–µ–¥–∞, 1 –º–∞—Ä 2023 –≥. –≤ 02 —á–∞—Å–æ–≤ 48 –º–∏–Ω—É—Ç",
	"–ü–ù, 2 –Ø–Ω–≤ 2006 –≥.":      "–°–†, 1 –ú–∞—Ä 2023 –≥.",
	"–ü–ù/Mon, 2 –Ø–Ω–≤/Jan 2006": "–°–†/Wed, 1 –ú–∞—Ä/Mar 2023",
	"–î–∞—Ç–∞ 2 –Ø–Ω–≤–∞—Ä—å —è–Ω–≤–∞—Ä—å –Ø–Ω–≤ —è–Ω–≤ –Ø–Ω–≤–∞—Ä—è —è–Ω–≤–∞—Ä—è –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ü–ù –ø–Ω 06 –≥.": "–î–∞—Ç–∞ 1 –ú–∞—Ä—Ç –º–∞—Ä—Ç –ú–∞—Ä –º–∞—Ä –ú–∞—Ä—Ç–∞ –º–∞—Ä—Ç–∞ –°—Ä–µ–¥–∞ —Å—Ä–µ–¥–∞ –°–† —Å—Ä 23 –≥.",
	"–î–∞—Ç–∞ 2 üòä —è–Ω–≤ 2006 –≥.": "–î–∞—Ç–∞ 1 üòä –º–∞—Ä 2023 –≥.",
	time.RFC3339:           "2023-03-01T02:48:05Z",
}

var loc, _ = time.LoadLocation("Europe/Moscow")
var t2 = time.Date(1993, 03, 20, 15, 21, 31, 0, loc)

var layouts2 = map[string]string{
	rtime.GOST2016Word:              "20 –º–∞—Ä—Ç–∞ 1993 –≥.",
	rtime.GOST2016Numeric:           "20.03.1993",
	rtime.GOST2003Word:              "20 –º–∞—Ä—Ç–∞ 1993 –≥.",
	rtime.GOST2003NumericReverse:    "1993.03.20",
	"2 —è–Ω–≤–∞—Ä—è 2006 –≥., –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "20 –º–∞—Ä—Ç–∞ 1993 –≥., —Å—É–±–±–æ—Ç–∞",
	"2 —è–Ω–≤–∞—Ä—è 2006 –≥., –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "20 –º–∞—Ä—Ç–∞ 1993 –≥., –°—É–±–±–æ—Ç–∞",
	"2 —è–Ω–≤–∞—Ä—è 2006 –≥., –ø–Ω":          "20 –º–∞—Ä—Ç–∞ 1993 –≥., —Å–±",
	"2 —è–Ω–≤–∞—Ä—è 2006 –≥., –ü–ù":          "20 –º–∞—Ä—Ç–∞ 1993 –≥., –°–ë",
	"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 2 —è–Ω–≤ 2006 –≥. –≤ 15 —á–∞—Å–æ–≤ 04 –º–∏–Ω—É—Ç": "–°—É–±–±–æ—Ç–∞, 20 –º–∞—Ä 1993 –≥. –≤ 15 —á–∞—Å–æ–≤ 21 –º–∏–Ω—É—Ç",
	"–ü–ù, 2 –Ø–Ω–≤ 2006 –≥.":      "–°–ë, 20 –ú–∞—Ä 1993 –≥.",
	"–ü–ù/Mon, 2 –Ø–Ω–≤/Jan 2006": "–°–ë/Sat, 20 –ú–∞—Ä/Mar 1993",
	"–î–∞—Ç–∞ 2 –Ø–Ω–≤–∞—Ä—å —è–Ω–≤–∞—Ä—å –Ø–Ω–≤ —è–Ω–≤ –Ø–Ω–≤–∞—Ä—è —è–Ω–≤–∞—Ä—è –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ü–ù –ø–Ω 06 –≥.": "–î–∞—Ç–∞ 20 –ú–∞—Ä—Ç –º–∞—Ä—Ç –ú–∞—Ä –º–∞—Ä –ú–∞—Ä—Ç–∞ –º–∞—Ä—Ç–∞ –°—É–±–±–æ—Ç–∞ —Å—É–±–±–æ—Ç–∞ –°–ë —Å–± 93 –≥.",
	"–î–∞—Ç–∞ 2 üòä —è–Ω–≤ 2006 –≥.": "–î–∞—Ç–∞ 20 üòä –º–∞—Ä 1993 –≥.",
	time.RFC3339:           "1993-03-20T15:21:31+03:00",
}

func TestFormat(t *testing.T) {
	rt1 := rtime.RTime{Time: t1}
	for layout, expected := range layouts1 {
		result := rt1.Format(layout)
		if result != expected {
			t.Errorf("Expected %q, result %q, layoyt %q", expected, result, layout)
		}
	}

	rt2 := rtime.RTime{Time: t2}
	for layout, expected := range layouts2 {
		result := rt2.Format(layout)
		if result != expected {
			t.Errorf("Expected %q, result %q, layoyt %q", expected, result, layout)
		}
	}
}

func TestDate(t *testing.T) {
	loc, _ := time.LoadLocation("Europe/Moscow")
	tt := time.Date(2023, 03, 1, 02, 48, 05, 0, loc)
	rt := rtime.Date(2023, 03, 1, 02, 48, 05, 0, loc)
	ttFormatted := tt.Format(time.RFC3339)
	rtFormatted := rt.Format(time.RFC3339)
	if ttFormatted != rtFormatted {
		t.Errorf("time %s and rtime %s are not equal", ttFormatted, rtFormatted)
	}
}

func TestAdd(t *testing.T) {
	loc, _ := time.LoadLocation("Europe/Moscow")
	rt := rtime.Date(2023, 03, 1, 02, 48, 05, 0, loc)
	rt = rt.Add(time.Hour * 24)
	if rt.Format(rtime.GOST2016Numeric) != "02.03.2023" {
		t.Errorf("Expected 02.03.2023, actual %s", rt.Format(rtime.GOST2016Numeric))
	}
}
